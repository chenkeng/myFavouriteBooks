目录
  ● Day 1 走近黑客与画家
№.1 本书导语
№.2 思考与讨论
№.3 为什么书呆子不受欢迎——他们的心思在别处
№.4 黑客与画家——同为创作者
№.5 今日总结
  ● Day 2 互联网和言论多元
№.6 思考与讨论
№.7 不能说的话——该如何安置？
№.8 良好的坏习惯——黑客的成功秘诀就是打破常规
№.9 另一条路——互联网是微机诞生后的最大机会
№.10 互联网软件——一条有光的路
№.11 今日总结
  ● Day 3 关于财富和设计
№.12 思考与讨论
№.13 如何创造财富——创造财富的最好方法就是创业
№.14 关注贫富分化——收入不平衡的危害到底有多大
№.15 防止垃圾邮件的一种方法——垃圾邮件是能够被过滤的
№.16 设计者的品味——如何做出优秀的东西？
№.17 今日总结
  ● Day 4 讲一讲编程语言
№.18 思考与讨论
№.19 编程语言解析——编程语言怎么就火了？
№.20 一百年后的编程语言——为什么不从现在就开始这样做呢？
№.21 拒绝平庸——你的对手还很强大
№.22 今日总结
  ● Day 5 理想的编程语言和设计
№.23 思考与讨论
№.24 书呆子的复仇
№.25 梦寐以求的编程语言——可以让黑客随心所欲使用的语言
№.26 设计与研究——够“新”够“好”
№.27 今日总结

№.1 本书导语
本书是硅谷创业之父保罗·格雷厄姆（Paul Graham）的文集，主要介绍黑客（作者指的是优秀的程序员）的爱好和动机，讨论黑客的成长、黑客对世界的贡献以及编程语言和黑客工作方法等一些话题。书中的内容有助于我们了解计算机编程的本质和互联网行业的规则，更了解这个计算机时代。
作者想还原给大家真实的黑客，他们不神秘，也不是技术怪人。《黑客与画家》的书名就是想让大家把黑客与画家当作同一种人去看待。和画家一样，黑客只是怀有一门特殊手艺、有创造天赋的普通人。从某个角度来看，编程是一种艺术创作，黑客是艺术家，开发软件与画家作画、建筑师设计房子在本质上是一样的。
读完此书，你看待这个世界的眼光可能会变得不一样哦。
阅读提示：
精简书采纳了原书的第一人称的写法，所以，下文的“我”都指的是作者保罗本人。
另外，这本书的英文原版是在2004年出版的，再加上主要是讲美国的情况，所以，在阅读的过程中，读者需要自行甄别是非真假，是否在今天的中国同样存在或适用。

№.2 思考与讨论
说起“书呆子”这个词，你脑海中浮现的形象是怎样的？是明眸善睐，还是低眉顺眼？是精明的，还是笨拙的？是可爱的，还是可笑的？另外，关于书名《黑客与画家》，你想到了什么？这两群人看似风马牛不相及，又是如何摆到一块去的？
今天，我们将走进两群人——书呆子和黑客。
对了，你可以想一想这两群人有没有什么联系哦。

№.3 为什么书呆子不受欢迎——他们的心思在别处
初中时，大家会把喜欢读书的人称作“书呆子”。那时，越是喜欢读书的人，越不受同伴欢迎，“书呆子”差不多成了“不受欢迎”的代名词。后来我发现，我认识的很多高智商的人都曾被叫过“书呆子”。这样看来，“高智商”会让他们不受欢迎。
理论上，聪明的孩子能很容易从他人受欢迎的行为中找到让自己受欢迎的诀窍，那为什么他们却一直不受欢迎呢？
我想，是他们不想让自己受欢迎！我曾是书呆子中的一员，就不想花时间精力取悦大家，相反，更愿意让自己变得更聪明，比如在学校取得好成绩、能写漂亮文章、搞懂编程原理等等——这些才是伟大的值得追求的事。
虽然书呆子会被排挤，但大多数书呆子都不愿因此放弃拥有的聪明——虽然每个中学生都希望自己是受欢迎的。因为11岁之后，同伴会比家长对孩子的影响更大，大家每时每刻都想着能融入群体之中，获得认可。例如，这个年龄段的孩子开始关心自己的服饰（由于互联网和电子产品的发展，可能这个年龄会越来越小）。然而，想要成为受欢迎的人是需要长期经营的，而且激烈竞争，并不是随便花点时间就可以实现的。
而书呆子不受欢迎的真正原因，是他们认为有其他更有意义的事情要做。时间毕竟有限，相比花时间梳妆打扮，不如用这个时间去读书和观察世界。在父母的教导下，受欢迎的小孩从小就在琢磨如何讨人喜欢，而书呆子则是想着如何追求正确答案。所以，就算书呆子想让自己和其他小孩一样讨人喜欢，也是比较难的。
让书呆子比较难以忍受的是，在学校，不受欢迎通常还意味着会被歧视和欺负。
首先，青少年在心理上还没有摆脱儿童状态，他们欺负书呆子，仅仅是觉得好玩。良知诞生之前，折磨即是娱乐。另一个原因则是，处于焦虑的人数众多的中间层希望借踩低别人以抬高自己。不过我认为，最主要的原因与孩子追求“受欢迎”的心理有关（注：英语单词popular还有“大众化的，多数人的”这个意思，所以，本书提到的“受欢迎”实际上都是指大众化），能顺利成为某个小团体的一份子，即是受欢迎的开始。有句话是“敌人的敌人就是朋友”，还有比书呆子更合适作为共同的敌人的群体吗？
书呆子因为不受欢迎，属于学校最底层成员。因而，上面问题的答案出来了：还真没有。但书呆子们不妨记住，树敌并不是因为你做错了什么，一群孩子一起来欺负你，他们往往并不是针对你，他们只想找个一起做的事情罢了。多么无聊，多么可悲！
对我而言，最糟糕的日子是初中。问过的其他人也几乎都认为， 11岁到14岁是人生的最低谷。学校的老师就像监狱的狱卒，他们只关心犯人是否待在应该待的位置。至于内部斗争、拉帮结派、小打小闹等，基本上都是睁一只眼闭一只眼。结果是，学生有了野蛮的内部文化，谁能保证这样的学校里不会有校园暴力事件？
表面上，学校的使命是教书育人。实际上，学校的真正目的是把儿童都关在一起，以便大人们白天可以做自己的事情——这是导致部分学生变得无聊和残忍的根本原因。但在成年人看来，孩子在学校产生的不快乐是由于青春期的生理原因。大家都这样认为，甚至连孩子们自己都相信了。当谎言被不断郑重地重复，连说谎者都可能会被欺骗。
除了孩子之间的不良关系外，还有个更糟糕的问题是，孩子没有获得真正工作的权利，没有地方发挥才能，个人价值就无法体现，一切都显得毫无意义。在工业时代之前，青少年一般都是某个领域的学徒，他们已入了成年人社会，少年尊重传授技能的成人，成人看好一同共事的少年。现在，未成年的工人被称为童工，是被禁止的。而且，随着社会分工的进一步细化，工作越来越专业化，相关的训练越来越繁重。所以更多的人是读完大学，二十出头才开始工作。
中学让孩子度过了不快乐的六年，同时也给孩子带来了叛逆心理，使他们远离了本应该学习的东西。在这场斗争中，书呆子并不是唯一的输家，一些孩子由于对这个教育系统的厌恶选择了组队退出。
校园生活的真正问题是空虚，成年人只有意识到这一点，才有可能从根本上解决问题。书呆子并不是失败者，他们只是更接近真实世界。同时，他们也要意识到，学校并非人生的全部，还有更重要的事情在前头，我们要一直向前看。
如果你觉得人生糟糕透了，那不是因为青春期的到来，也不是人生真的如此糟糕。只是因为你对成年人而言不具有经济价值，所以他们需要把你扔到学校，一连好几年，无所事事。这是大环境导致的，而非其他所谓的理由。
以上一些观点可能不太顺耳，但我对未来是乐观的，再难解决的问题，也是有解决方法的，难的是成人要意识到自己该做什么去完成教育制度的改革。另外，青少年并非天生不快乐，这点对于青少年和成人来说，应该都是令人鼓舞的消息。



№.4 黑客与画家——同为创作者
我在读完计算机系的研究生后，就去学习绘画了。在我看来，黑客与画家是极为相似，他们从本质上来说都是创作者。
另外，容我吐槽下“计算机科学”（computer science）这个荒谬的词，让只是冠了“计算机”还是在搞数学的数学家，研究各种计算机相关课题（如算法）的计算机博物学家和只是想写出有意思的软件的黑客，在这个词里被混为一谈。另外，黑客的工作被称为“软件工程”，其实是不准确的。黑客更像是决定“做什么”的建筑师，而非仅思考“怎么做”的工程师。
黑客不愿意被贴上“计算机科学”的标签，这会让人觉得自己是个搞科学的，必须写些研究性论文什么的。他们想要自由的创作，想开发酷炫的软件。而优美事物的创造往往是在现有成果的基础上做微小的调整，或者是已有事物的新组合。这类工作并不适合用论文来描述，因为论文需要的是原创性，是无中生有。
论文因其容易操作被视为考核指标，好比考试成绩。但某个作品（包括画作、软件等）唯一有效的外部考核是时间——在诞生百年后，在同一代人逝去后，作品才能有一个公正的评价（基于塞缪尔·约翰逊的言论）。
如果学术界没有可发挥的余地，那么就去企业逛一逛吧。不幸的是，企业对于黑客来说，也并非乐土。大部分企业需要是用软件实现特定功能的工程师，而不是设计软件。简单来讲，黑客的任务只是将产品经理的构想翻译成代码。
站在企业的角度，这样做没毛病。虽然有的黑客能构建出超优秀的软件，但大部分黑客是不太懂如何设计软件。让黑客只做翻译可以降低设计风险，且对大公司而言，只要做到不太烂，就是胜利。好比Word，不需要特别完美，但因为有微软的操作系统做堡垒，就算再好的文字处理软件也很难战胜它。只要不出错，出不出彩不是事儿。
软件设计的主战场在新兴领域。很多创业公司都是通过开辟一个新市场而成功的，比如苹果。所以，想要自由开发软件，可以加入创业公司或自己创业。不过，创业会干扰编程，我在搞Viaweb时（Viaweb是帮助用户做网店的应用程序，1995年创立，1998年以4900万美元被雅虎收购，收购后更名为Yahoo!Store），在开发上花的时间还不到四分之一。人在江湖，身不由己。扛把子看似威风，但肩上的担可不轻。
做自己喜欢的事情并赚钱，对黑客来说也是一件难事。如果黑客想要兼顾兴趣与生存，还有一个搞创作的人都知道的方法：找一份“白天工作”（day job），养家糊口，空余时间就可以为了爱好去奋斗了。开源（即开放源代码）软件界的黑客早就开始这样做了。
说回黑客与画家吧，除了本质是创作者外，两者还有哪些相似之处呢？
首先，两者的学习方法是相通的。其一，画家学习绘画需要动手作画，黑客学习编程也是这样，只有不断地敲代码，才能获得编程能力的提升，皆为实践中成长。不要怂，就是干。
其二，两者都可以通过对范例的研究得到提升。临摹大师作品是美术教育必备环节，在临摹中，你思考一幅画是如何完成的。黑客也是如此，观摩优秀的程序代码，借其优化编程思维和习惯。开源运动带来的好处之一，就是使学习编程变得更容易。
另外，两者的创作过程也颇为相似：优秀的编程也要打草稿，就像好的作品是诞生于落笔之后，而非之前。绘画从一张草图开始，然后逐步填入细节，若有了更好的创意，大可以修改或者调整——即两者都可以通过试错、修改来逐步完善。
我觉得，黑客应该借鉴绘画的这一过程。不需要在编程前就想着要搭建一个完美的框架，在编程过程中来逐步丰满，实时修改。不过，这个过程需要一丝不苟、精益求精的态度。
下图是达·芬奇的《女性肖像》，请你看一下这位女士的头发和树的分界线：

树枝虽只是背景衬托物，并非画像的视觉重点，但他却画出了每一片叶子。这些不显眼的细节累加起来就是一幅完美的作品。优秀的软件也该如此，就算没人会看见的部分，也需认真对待，比如整齐的代码格式，简单规范的变量命名等。这并非什么职业操守，只是对美爱得深沉罢了。
还有，黑客和画家一样是有创作的心理周期的，灵感不是24小时在线。因此，工作时，需要将这一周期考虑进去，在合适的时间做合适的事情。如果对你来说，消灭bug属于较轻松的工作，那么，在有创作激情时，就去编程。当热情过去，略显倦怠时，再考虑清理bug。
历史上许多伟大的艺术品都是多人合作的结果，例如，达·芬奇还是学徒的时候，在《基督的洗礼》（Baptism of Christ）中完成了一个天使。多人共同创作的作品，通常会有明确的分工，大师负责画主要人物，助手则负责次要人物和背景。从绘画中，我看到了多人开发的正确模式：将项目分割成严格定义的模块，每一模块指定负责人。模块与模块间，用接口相连，接口精心设计并用文档清楚说明。
最后，软件和绘画作品一样，受众都是人类。因此，在创作时，都需要站在用户的角度思考，即换位思考。用户需要的是什么，这很关键。以绘画作品为例，很多举世闻名的作品都是画人的，因为人类对自身的兴趣满满。
判断一个黑客是否具备“换位思考”能力，可以看他如何向普通人解释技术问题，是不是说人话。换位思考的能力对黑客来说是很重要的。从用户层面来讲，最好的软件就是可以凭直觉直接上手的，即所谓的傻瓜式操作；从代码层面来看，写出来的程序并不只是为了运行，需要做到过一段时间重读源代码，依然可以清晰看出运行的规则。这就像《计算机程序的结构与解释》里的卷首语一样：程序写出来是给人看的，附带能在机器上运行。
结尾的地方，抛个问题：黑客会像艺术家一样备受推崇吗？
如果问我，我会说：声望是经过漫长的时间洗礼后留存下来的。黑客与艺术家相比，还很年轻。在绘画的黄金年代，画家也没有今天这样酷。正是许多像达·芬奇这样的画家让绘画成为一种伟大的表达方式。同样，日后人们对编程的评价，也会取决于我们能够运用它去做到些什么。



№.5 今日总结
今天我们学习了高智商书呆子不受欢迎的原因以及黑客与画家身上的相似之处。
关键词：
书呆子，黑客，画家，创作
要点：
  1. 书呆子不受欢迎的真正原因，是他们认为有比讨人喜欢更有意义的事情要做。
  2. 黑客和画家，在本质上都是创作者。
  3. 黑客和画家在很多方面是相似的，如学习方法、创作过程、判断标准等。
思考与讨论：
你在学校的时候是否也被称为书呆子或者你的班级里也有书呆子的存在？你对“书呆子”的定义是什么？作者的观点是否对你有所触动？
你的工作在本质上是否也是创作者？你也可以尝试将自己的职业和其他职业对比一下，看看有什么相似的地方。

№.6 思考与讨论
 在不少小说或视频中，有这么一句话：有句话不知当讲不当讲？这引发了一个问题：该如何判断一些话适不适合宣之于众。
另外，在你用过的软件中，哪些是你安利过身边的人的？为什么？
今天，我们主要会讨论：哪些话是不能随便说的？互联网软件为何物？为何会诞生？

№.7 不能说的话——该如何安置？
翻看老照片，我们可能会惊叹当时的杀马特造型，打死都想不明白，到底哪里好看了。不仅审美如此，主流道德观念也有这种现象——明明是错误的观点，大多数人对此却深信不疑。直到潮水退去，真相才浮出水面。
任何年代，总有一批激进的人，对一些荒谬的东西深信不疑，且不容任何人表示怀疑。而在大众观念中，书呆子是不易受影响、坚持自我的人群之一。他们看清问题的本质并说出了自己的观点，然后不出意外地惹上了麻烦。
我们现在言之凿凿的东西，可能在不久的将来就会被视为荒诞不经。我设想如果有未来人乘坐时间机器回到当下，有哪些话是他们避免说出口的？是否有适用于所有年代的通用法则，去辨识不能说的话，将祸堵在肚子里？
首先请回答一个问题：有没有什么观点是你不愿在公众场合说出口的？
如果你的答案是没有，那么有两个可能，一是你所有的观点都是别人灌输的，且被误认为是自己的；二是你的思想和主流思想几乎完全契合，错也一样。想想考试吧，两份试卷答案错也错得一样，概率大吗？
有句话讲：“要根据社会的需要，改造自己的思想。”意思是，如果你有不认同社会的想法，你就有问题，要接受改造。在我看来，如果你信了这句话，才是大问题呢。
好，接下来说说如何判断什么话是我们不能说的。
你需要先观察周围的人因为说了什么而陷入麻烦。严格地说，我们要找的“不能说的话”还需要加一个限定条件，即这句话可能是正确的。比如，你说2+2=5并不会有什么麻烦，因为这是错误的，只会被当作一个笑话。某些言论能令人暴跳如雷，是因为它有可能是真相。好比伽利略说地球围绕太阳转，教廷就去打他，是因为他们知道，这个言论会引发大家的思考。
第一种找到“不能说的话”的方法来了：判断言论的真伪。当你觉得某些言论很可疑，听起来大逆不道，你可以再多想想这些话是否可能是真的。如果是，那么请小心。
除了真话不能说，关注极富争议的“异端邪说”是找到“不能说的话”的另一方法。
这样的说法往往有很强的时代特征，最后被推翻。这些“异端邪说”一般会被贴一些标签，例如“亵渎神明”“冒犯圣灵”“有伤风化”等。分辨这些标签，只需要关注人们常会用到但你自己并不赞成、又不算错误的观点即可。比如丘吉尔曾将反对“对攻作战策略”的人称为“失败主义者”，帽子盖下去，软了脊骨，静了声音。这种情况在中国也曾上演过，标签一出，莫敢不服。
回顾过去，是第三种方法。将当下的观念与不同时期的观念diff（计算机术语，用来比较同一软件不同版本源代码之间的差异，再看一个词：different）一下，你就可以发现问题。有些禁忌自始至终都一样，比如杀人偿命，任何时代任何地方都是如此。而有些行为或观点，在大部分时空都是行得通的，却在此时此地被禁止，那么很可能是错的。社会观念决定了我们对是非善恶的判断，而社会观念是随着社会在变化的。若你能预测未来的趋势，那么可能就能看到目前主流社会中一些不合理的观念。
第四种寻找“不能说的话”的方法：寻找一本正经的卫道者，看看他们在捍卫着什么。好比父母尽量不在孩子面前说脏话，以免孩子学了去。孩子们得到错误的信息，觉得这些词是没人用的。当他们从朋友那知道这些词的时候，他们也会避免在大人们跟前使用。这些词其实是日常用语的一部分，但在大人的精心设计下，孩子活在一个不真实的世界里。当他们长大后接触了社会，就会发现小时候以为真实的事情，其实荒唐得紧。我小时候读历史，一直无法理解为什么15世纪葡萄牙“探险家”要沿非洲海岸探险，深入非洲内陆难道不是更能达到目的？后来才知道，葡萄牙人的真实目的是抓黑人当奴隶——这是大人不愿意让孩子了解的事实。同理，卫道士也有一些不想让人知道的真相。
第五种方法，观察禁忌是如何产生的。一个道德观从出现到被大众接受的机制，可能仍适用于当下。时尚通常会受某些有影响力的人物的左右，带货女王的一张街拍，就能引发某宝上的同款热卖。而道德观的流行却不是这样，它是被刻意营造出来的。有些观点不能被表达，很可能是某些团体不允许人们表达，例如中世纪的教会不允许人们讨论日心说，例如老早前茶馆里贴的“莫谈国事”。
思想观点和时尚的流行在产生方式虽然不同，但在传播方式上是一致的。第一批接受者有自觉的精英意识，想把自己与普通人区分开。当流行趋势确立后，第二批接受者就加入进来了，他们的加入，只是因为害怕与众不同罢了。
你想过没有，我为什么要找出“不能说的话”？
好，自问自答开始：首先，满足好奇心，然后看清所禁之物，再做决定。其次，我不喜欢犯错，不愿意去做有可能是荒谬的事情。再者，我觉得这是对大脑的训练，能让大脑养成思考的习惯。优秀的作品往往来自于被人们忽视的想法，而最被忽视的观点就是那些被禁止的。在科学领域，质疑的态度尤为重要。一个好的科学家，必须是能打破传统观点，且追根究底的人。
找到了“不能说的话”，然后呢？我的建议是，守口如瓶，或者在合适的时机开口。
自由思考比畅所欲言更重要，没必要一定说出个是非曲直。与笨蛋辩论，你也会变成笨蛋。“不能说的话”太多了，逞一时口舌之快，你可能耽误很多时间——和人撕和被人撕。
除了守口如瓶，还可笑脸相迎。保持既不反对也不赞成的态度即可。另外，你也可以用到“元标签”（对现象的抽象描述，方向要正确），隐喻（我笑你，你却无可奈何）和幽默等。
要做一个能怀疑和抵制社会错误潮流的人，永远保持质疑的态度（注：永远质疑≠怀疑一切）。多问问自己，什么话不能说，为什么不能说。适当远离人群，并远距离地观察自己（以旁观者的视角），保持思考的能力。因为——
如果你自己是潮水的一部分，怎么看得见潮流的方向呢？



№.8 良好的坏习惯——黑客的成功秘诀就是打破常规
说到黑客（hacker），大家的第一印象可能是入侵计算机的人。但在程序员眼里，黑客是计算机界的佼佼者。他们精通计算机语言，可以随心所欲地支配它。黑客入侵系统可能只是为了满足智力上的好奇，不能从常规的犯罪动机出发去调查他们。早在计算机出现之前，黑客就已经存在了，费曼（注：美国著名物理学家，诺贝尔奖获得者）曾喜欢破解存放机密文件的保险箱密码，因为有趣。
随着计算机的广泛应用，数据变得容易被复制和流通，保护知识产权的相关法律应运而生，黑客表示不开心。因为版权法禁止外部人员了解专有技术的内部细节，黑客不能深入了解当前的技术，这阻碍了他们创造新技术。
知识产权所有者的观点是：我自己的技术，我们自己去更新迭代，谁都别插手。然而在计算机工业史上，新技术往往是由外部人员开发的。正如1977年的新一代电脑不是诞生在IBM实验室，而是两个完全不相干的年轻人在车库里开发出来的（注：苹果公司1977年推出的APPLE II 计算机是世界上第一台个人电脑）。差不多同一时间，计算机几大巨头合力研发了Multics操作系统。但26岁的肯·汤普森和28岁的丹尼斯·里奇觉得这个系统太复杂，于是写了一个新的操作系统，并参照Multics取了Unix的名字。
黑客大多不服从管教，也是他们成为优秀程序员的原因之一。我认为，适当包容黑客的这种态度，利大于弊。黑客是一群聪明且自负的人，自负的人一般都感觉敏锐。比如，黑客群体对国家的公民自由范围收缩表示抗议，政府对此应该保持警觉。政府侵犯公民自由，表面上看，对程序员敲代码并没有任何影响。黑客之所以如此在乎，是因为他们敏感地觉察到极权主义的威胁，就好比动物能感知暴风雨的来临。
具体而言，公民自由是国家富强的原因，只有在言论和行动自由的社会，政府才会采纳最优的解决方案，而不是最有权势的几个人拍板子。限制公民自由，政府的力量会先增加后减小。
美国开国元勋的自述，听起来就很黑客。杰弗逊（注：美国第三任总统，《美国独立宣言》主要起草人，是美国开国元勋中最具影响力人物之一）写道：“反抗政府的精神，在某些场合是如此珍贵，我希望它永远保持活跃。”他们提醒着我们，正是那些不服从管教的人们，才是美国财富与力量的源泉。
那些想约束黑客、强迫黑客服从的人，请小心行事，你们真的有可能成为千古罪人。
（编者注：其实这张卡片说的无非就是三个词：法治、自由和富强。另外，对于作者一些比较激进的观点，读者应取精去糟，为己所用。）

№.9 另一条路——互联网是微机诞生后的最大机会
1995年，夏，我和罗伯特·莫里斯（注：现任麻省理工学院计算机系副教授，1988年写了第一个蠕虫程序，2005年和作者共同创立了风险投资公司 Y Combinator）决定创业，方向是专门制作网上商店的软件。我们最终放弃了传统的桌面软件，而是把浏览器当作操作界面，让软件在服务器上运行（包括某些软件的网页版）。事实证明，这种思路是正确的，这款软件（Viaweb）成为了最受欢迎的网上商店生成器，用户超过2万，后来被雅虎以4900万美元收购。
创立Viaweb时，几乎没人理解在服务器上运行软件是什么意思，直到一年后Hotmail开始运作。现在，这一概念已被大家所熟知，它有个专门的名字：应用服务供应商（Application Service Provider，简称ASP）。
这种模式有发展前景，对开发者而言，把软件从桌面移到服务器，一切将发生根本性的变化。本文站在先行者的角度，描述这些令人惊叹的变化。因为这种趋势才刚刚开始，所以以下内容是我的憧憬（注：对于当时而言）。
互联网软件会是下一个潮流，像汽车一样流行。互联网软件在网页上运行，不需要安装，不需要更新，对普通用户来说，更容易、更便宜、更机动、更可靠。用户除了软件本身，不需要知道别的东西，经常需要更新变动的部分，由专业人员在服务器端去维护。省事。
它不受地域的限制，在任何地方都可以使用，不用担心安装出错，也不用考虑软件是否与操作系统兼容。典型例子就是Email，现在大家都觉得，随时随地收发Email理所应当。Email可以做到，为什么其他的文档不能呢？数据的概念正在取代电脑的概念，即你可以在任何终端设备（电脑、手机、平板灯）上获取你想要的数据。
所有用户都使用同一版本，没有多版本适配问题，bug会少很多。且一旦发现，就能立即解决。互联网软件允许多人同时操作（例如石墨），Viaweb就允许多个用户同时制作一个站点，是很受用户喜欢的一个功能点。
使用互联网软件，数据也会相对更安全。基本不会发生丢失数据的情况，因为运营商一般会备份数据，只要登陆账号，一切数据都还在。互联网软件也不太容易感染病毒，专门攻击服务器端的病毒也比较容易防御。
另外，互联网软件的低门槛、易操作让用户的操作无压力，这也是互联网软件得以被迅速推广的原因。
对开发者而言，互联网软件与桌面软件的区别在于，设计桌面软件像是设计一幢大楼，而设计互联网软件就像设计一座城：除了建筑物，还需要设计道路、路标、公用设施、警察局、消防队，且还需制定城市发展规划和紧急事件的应对方案。Viaweb软件除了基础功能程序，还有报错程序、备份程序、实时显示服务器状态和访问数据的程序等。
只考虑软件还不够，还需要花时间琢磨怎样配置服务器，为尽可能多的用户提供服务。这也是互联网软件的另一优势，只要控制了服务器，你就能轻而易举地增加功能。
互联网软件不限定开发语言，你可以根据软件需要实现的功能去挑选一种最适合的工具。而桌面软件，就必需使用与操作系统一致的开发语言，也就是C和C++，相对而言就局限了。

№.10 互联网软件——一条有光的路
我们接着说互联网软件的优势，比较多，得歇口气。
互联网软件解决bug是有优势的，因为用户的数据都存储在服务器上，你可以再现大部分的bug，解决起来也相对容易。很多互联网公司习惯让用户一起来找bug，我很是赞成这种思路。解决新代码bug比解决历史遗留代码的bug容易得多，早发现bug也有助于复合bug（指互相影响的两个bug，如负负得正）的减少。复合bug是很难发现的，且一旦产生，往往会导致较大的损失。
互联网软件的客户支持工作也相对容易操作。客户支持实际上是质量监测，除了记录bug，还需回答与bug相关的一些问题，解释用户不熟悉的功能。Viaweb的客服人员（注：当时还没有出现运营岗）最初是和开发人员挨着坐的，他们可以随时向开发人员反馈用户遇到的新bug，bug总能被快速解决。Bug修复机制就进入良性循环，客服和客户都因反馈能得到快速响应，反馈积极性也很高。
即时发布软件，对开发者而言，是个很好的奖励。上班时想到一个很赞的功能，下班时外网就可以实现了，且能很快知道这是不是一个符合用户习惯的功能点。创意是有连锁效应的，实现的创意越多，由此激发的新创意就越多。
布鲁克斯写过一本软件项目管理名著《人月神话》，这里的“人月”指一个人在一个月内能完成的工作量。比如，一个需要12个人月的项目，如果4个人参与，则需要3个月完成，增加至6个人，完成期限就会缩短至2个月。布鲁克斯认为软件项目的人力和工期并不符合这一原则的。因为人变多，交互关系变复杂，沟通成本也会增加，项目进度可能还会因此延后。
参与软件开发的人数越少，软件开发效率越高，沟通成本相对也很小。Viaweb基本上没开过与编程相关的会议，参与开发的只有3个人，我们可以在吃饭的路上就敲定思路和细节。当然，开发人员少也是有缺点的，除了需要负责自己的代码外，每个程序员还要承担一部分系统管理的责任，在发布新内容的时候，需要自己监控服务器。我觉得，第一年后就不必每分钟盯着服务器了，且最好不要半夜发布代码之后就睡觉，对新变动的部分，一定要密切关注。
互联网软件将开发者与代码、开发者与用户紧密地联系在一起。每个用户的每一次点击都有数据记录，通过数据分析，你可以知道哪些功能是用户所需要的，哪些需要优化。效率对互联网软件至关重要，因为服务器的成本是你自己承担，软件效率越高，在同一时段支持在线使用的用户数量越多，分摊到每个用户的成本越小，就越容易打败同样配置的竞争对手而获得盈利。
互联网软件的用户像订阅报纸那样，按照使用时间订购软件的使用权。对软件公司而言，不会有坏账的烦恼，不付费，就不支持使用，也不存在遇到盗版的可能。虽然说一定数量的盗版是有好处的。因为不管你定价多少，一定有一批不会购买的用户。如果这样的用户使用盗版，对你并没有任何损失。相反，你多了一个真实用户，同时也是潜在用户，用顺手了，可能某天就愿意付费了。另外，付费途径一定要方便，做得越复杂，风险越大。
商业公司采用“价格歧视”的定价方法，针对不同用户给出不同报价，使得利润最大化。因为软件的边际成本（经济学概念，指下一个单位产品的生产成本，软件的边际成本是复制代码的成本）接近为零，边际成本越低，公司的定价空间就越大。
另外，互联网软件经常会采用分销模式，让ISP（Internet Service Provider，互联网服务提供商）分销（即建立销售渠道）。我很不赞成这样做，因为这意味着放弃了对服务器的直接控制，也意味着放弃了互联网软件的大部分优势。在刚开始的时候，最好将个人和小企业当作目标客户，因为如果要将商品推销给大公司的话，你往往需要先付出高额的投入。
如果你是一个想自己创业的黑客，千万不要因为不懂管理企业或害怕竞争而放弃。管理企业只要记住两个要诀：做用户喜欢的产品，确保收入大于支出。产品必须是你自己愿意使用的，先发出1.0版本快速上线，上线后再有针对性地优化更新，比如结合用户的意见、竞品的优缺点等。在越来越小的创业公司里，技术将放大创业者的决策效果——如果你是对的，你终将成功。



№.11 今日总结
今天我们探讨了哪些话不能说（可能还会有所遗漏），政府为何需要适当包容黑客的任性以及互联网软件的一些优势。
关键词：
不能说的话，包容黑客，互联网软件，优势
要点：
  1. 自由思考比畅所欲言更重要，看到真相不代表需要逢人就说。
  2. 政府需要适当包容黑客的叛逆，因为无伤大雅，且利大于弊。
  3. 互联网软件与桌面软件相比，有很多优势，诸如更新迭代更方便快速、用户使用门槛更低、数据更安全等。
思考与讨论：
  1. 你遇到过因为说话给自己惹上麻烦的事吗？是否有自己的“不能说的话”列表？关于作者找到“不能说的话”的方法，你有什么看法？
  2. 看完本节内容，你能否区分你使用过的互联网软件和桌面软件，两者对比，是否存在文中提到的优势？另外，桌面软件又有哪些优势？
№.12 思考与讨论
财富是什么？是钱吗？
贫富差距这么大，是为什么？正常吗？
垃圾邮件怎么防？
好的设计是怎样的？
你是否想过以上的问题，今天，我们将一起探索这些问题。

№.13 如何创造财富——创造财富的最好方法就是创业
创造财富的最好方法就是自己创业或者加入创业公司。创业公司往往是解决了某个技术难题的小公司。你知道为什么创业公司必须是小公司吗？为何他们的发力点都在新技术领域？
让我们先谈谈创造财富指的是什么。
创造有价值的东西就是创造财富，而财富并不等于金钱。我们需要财富，即使没有钱，你也能拥有财富（如房、车等）。金钱是交换媒介，能简化交易过程。交易是为了直接或间接地获取自己想要的东西。财富和金钱，二者可以相互转化，但不能等同。
关于财富，有这么一个大饼谬论：世界上的财富总额是固定不变的。这就是说，如果富人拿了更多的钱，那么其他人就会变得更穷。这个观点确实很能忽悠人，可能很多成人至今还有类似的看法。但事实并非如此，世界上可供交换的财富并非恒定不变，财富一直是在不停地增长和毁灭，这是动态的过程（总体是净增长，所以相对过去而言，人类在物质层面活得越来越好）。
例如，程序员动手写了一款软件并卖了出去，他使自己更富有，同时，他并没有让任何人变穷。显而易见，财富是被做出来的。大多数人觉得最富有的5%人口占社会50%以上财富是不公平的，经验老道的程序员可能也这么认为。在他们看来，最顶尖的5%的程序员写出了世界99%的优秀软件。创造的财富不一定通过售卖来实现价值，黑客经常会将代码开源，让需要的人免费使用。被人需要，即有价值，只是没有变现罢了。
创造财富是所有的手工艺人和大多数公司盈利的手段。公司存在的目的就是满足人们的需要。公司的每一个员工，直接或间接地为这一目标而工作。大公司员工的贡献比较平均，团体的作用更为明显，每个员工做好分配的任务即可，不需要个人有太多的发挥。
那么，个人如何致富呢？除了运气之外，需要考虑两个词：可测量性和可放大性。例如，CEO的工作由公司的表现体现，其决策也将放大到公司的方向和战略上。
在创业公司，员工少，每一个人的努力，都可能直接关系到公司的整体收益。工作效益可量化，便有要求更高收益的资本。这好比销售人员，他们的工资主要是销售提成，卖得多就赚得多（可得：小团体=可测量性）。
创业公司通常是通过发明新技术盈利，走别人没有走过的路，所以具备可放大性（如你只能一次煎一个鸡蛋，但煎鸡蛋的新技术却能被很多人使用，符合“一次开发，普遍适用”的模式）。创业公司就像游击队一样，喜欢选择不易生存的深山老林作为根据地。选择解决问题的技术越难，就越有商业价值，越难被对手模仿。
一般风险投资（VC）在决定是否投资时，都会先问你，他人复制你的模式的困难度是多少，即进入壁垒——你为竞争对手设置的壁垒有多高。设置“进入壁垒”的方法之一就是申请专利。但申请专利也不是制胜法宝，竞争对手很可能绕过专利或者大公司会直接侵犯专利，等着你去起诉。他们并不害怕打官司，因为打官司是一场费时费钱的战争，吃亏的必然是小公司。因此，在开发之初，选择最难以复制的高难度技术，是最明智的选择（可得：高科技=可放大性）。
通常情况，创业公司的每一天都是高强度，回报也会相对较高。由于收入和创造的财富是成正比的，所以你必须延长工作时间以及提高工作效率来增加你创造的财富。但这并不意味着就可以高枕无忧，收益越大，风险越大。创业的付出与回报大体上是成比例的，然而中位数却是0——因为大多数创业公司是以失败告终的。创业公司就像蚊子，作为群体数量极多，但个体却很难生存。
如果你的公司有被收购的机会，那是个不错的选择。因为管理公司与创立公司是不同的两件事。当情况基本稳定后，让大公司接手是明智的选择。把公司卖掉也是有学问的。潜在买家会尽可能地拖延收购。你要让买方感受失去机会的恐惧或者感受到你的高速成长，他们就会果断掏钱。这影响两个收购动机的主要指标，是用户数量。
因此，请时刻记住，创造用户需要的东西，才是创造财富。
最后，说一下近代创造财富这种致富方式的兴起。
在中世纪的欧洲，新兴的商人和制造业者促成了保护个人财产的法律，而之后的工业革命，更让人们心安理得地享用自己的财富。人们的主观能动性被打开，开始热火朝天地创造财富。生活有了奔头，干活自然起劲。



№.14 关注贫富分化——收入不平衡的危害到底有多大
赚钱是一项技能，和画画、下棋、写小说一样，但大家对善于赚钱的人却颇有微词。我觉得，造成这一现象主要有三个原因：第一，我们从小就被灌输了对财富的错误看法；第二，历史上敛财方式大都名声不太好；第三，担心收入差距拉大将会对社会产生不利影响。
财富从何而来？人类创造出来的。在农业时代，这一概念很好理解。大家生产粮食换取生活必需品。这个时候，财富的总量就不是固定的。如果你种地很厉害或者投入更多的时间，你将获得更多的财富。而现今社会，大多数人都是通过为他人创造财富来换取金钱，再拿钱换取所需的其他财富。一个人的价值是由市场决定的。由于每个人的技能不同，创造财富的欲望强烈程度也不同，收入自然也不同——这是导致贫富分化的主要原因。
很多孩子以为，钱是从父母那里流出来的，我们称这种观点为“老爹模式”。处在这种模式中的人，看到有人勤奋工作却没有得到更多的报酬就会感到不公平。因为他们认为财富就是从某个口子流出来的、大家所共享的东西。
历史上积累财富最常见的方法就是偷窃，这也是人们对贫富分化不满意的第二个原因。游牧社会偷牲口，农业社会则通过征税和直接掠夺。致富的方式都不是创造财富，而是弱肉强食，本质上就是偷窃。随着欧洲中产阶级的崛起，积累财富的方法开始有了变化。中产阶级是既不富裕也不贫穷的那部分人，他们以制造业和贸易为生，有强烈的创造财富的动机。通过创造财富走向人生巅峰成为可能，社会整体也快速地变得更富有。到了工业革命时代（始于18世纪60年代），创造财富取代掠夺和贪污成了致富的最佳方式。要知道，在17世纪的英国，大家都想着当官。但到了19世纪，最典型的富人不再是官员，而是实业家。
虽然情况得到改善，但因为人类历史上主要的致富方式长期是偷窃，所以很多人依然对有钱人抱有一种怀疑的态度。
抛一个问题：新技术是否加剧了贫富分化？
首先，技术的应用无疑会扩大生产效率的差异，只要你掌握了新技术。例如，用拖拉机耕地比马快6倍，我有了电脑后从兼职中服务员变为接编程的活。因此，技术会引起收入差距的扩大。
不过，技术也能缩小富人和穷人生活的差距。技术的引入使很多物资可以批量生产，量越大，成本越低。就拿汽车来说吧，对汽车公司而言，大批量生产的普通汽车要比定制款汽车利润更大。而对购买定制款汽车的富人来说，除了能告诉别人你很有购买力外，你还需要承受更大的风险，因为是小量生产，每一个零件都有更大的概率出现问题，质量反而更不可靠。所以，大家用的东西实际上都差不多了，纵然其价格因为品牌不同而差很多。所谓“腰缠万贯，每日不过三餐；广厦千间，夜寝不过六尺”，不过，广厦千万间可大庇天下寒士俱欢颜。
贫富差距很坏很坏，这似乎已成公理。不过，现实真的如此吗？
我反倒认为，收入差距的扩大是社会健康的信号。技术使得生产率的差异加速扩大，如果这种扩大没有反映在收入上，那么可能存在三种可能：
  ● 技术革新停顿了；
  ● 创造大部分财富的人罢工了；
  ● 创造财富的人没有获得报酬。
社会的变化涉及到很多因素，不仅仅是由于创造财富的原因。如果压制收入差距的扩大，不管是用偷窃私人财产的做法（封建社会），还是用高额税收的做法，最终结果都是：社会作为一个整体变得更贫穷了。
总体来说，我们要避免绝对贫穷，而不是相对贫穷。如果一定要在整体贫穷相对较富和整体富裕相对贫穷中选一个，我要选后者。如果选前者，那么可以试试去过唐朝贵族的生活。
社会需要富人，因为先富起来的人，会带动社会的整体进步，比如有人造出一台拖拉机，赚了钱，不过你也不再用马耕地了。



№.15 防止垃圾邮件的一种方法——垃圾邮件是能够被过滤的
我们可以写出识别垃圾邮件内容的软件，将垃圾邮件拒之门外。在转向统计学之前，我一直用特征过滤的方法，想要把这种方法的识别精度提高几个百分点很难，因为如果把过滤条件设置地更严格，误判率就会上升。
所谓误判，是指正常的邮件被误会是垃圾邮件。对于大多数用户来说，错一封正常邮件比收到垃圾邮件后果要严重得多。用户收到的垃圾邮件越多，他越不可能注意到垃圾箱中的正常邮件。所以，过滤效果越好，就越不能出现误判。
我开发统计学邮件过滤器的方法如下：
先准备好一组垃圾邮件和一组非垃圾邮件，每组4000封邮件。扫描每一封邮件的全部内容，包括邮件头、内嵌的HTML代码和JavaScript代码。我定了“实义标识”：字母、阿拉伯数字、破折号、撇号、美元符号，其他字符则是“实义标识”的分隔符，忽略完全由数字组成的字符串以及HTML注释。
统计每个实义标识在两个邮件组出现的次数。完成后，得到两大张散列表，表中每一栏就是一个键值对，“键”栏对应每一个实义标识，“值”则是这个标识出现的次数。接着，第三张散列表出现了，“键”栏对应的还是每一个实义标识，“值”则是这个标识出现在垃圾邮件中的概率。再用邮件中比较敏感的标识的概率计算整封邮件是垃圾邮件的概率，如果超过0.9，则视为垃圾邮件。
统计学的一大优点就是，你不需要一封封去看垃圾邮件。贝叶斯方法（一种统计推断的方法）可以让你知道你正在计算的是什么东西。识别垃圾邮件特征的过滤器为每封邮件计算一个“得分”，而贝叶斯方法为每封邮件算出一个概率。因为贝叶斯方法计算的是概率，所以它必须考虑邮件中所有的线索，不管是肯定性线索还是否定性线索。有些词（比如though、tonight）极少出现在垃圾邮件中，所以它们会大大降低这封邮件属于垃圾邮件的概率。有些词（比如sex）是垃圾邮件的高频词汇，则会大大增加概率。
我还设想，每个用户应该有两个 “删除”按钮，一个“正常删除”，一个是“垃圾邮件删除”。任何一封点了“垃圾邮件删除”的邮件都会进入垃圾邮件库，而其他的所有邮件进入非垃圾邮件库。最开始，可以有一个所有人共享的基本概率分布表，之后再根据每个用户收到的邮件统计得出属于用户自己的专属概率分布表。这样，过滤器就会更有效。每个用户自己定义垃圾邮件，使得垃圾邮件的发送者无法针对模板过滤器做出调整。
当然，还需要一个白名单，列出信任的发信人，让他们的邮件直接通过过滤器。我提倡使用白名单的目的主要是为了节约成本，这样做可以让程序只扫描陌生人的邮件。
我写垃圾邮件过滤器只是因为不想被它们打扰。在所有对抗垃圾邮件的方法之中，“贝叶斯过滤”是最有效的。当然，同时使用的过滤方法越多，综合过滤效果会越好。而结合的过滤器的差异越大，垃圾邮件逃过拦截的可能性越小。
如果垃圾邮件因此无法使用那些套路满满的推销语言，那么它的推销效果就会大大降低，使用的商家数量也会随之减少。当我们改变不了别人，可以通过改变自己影响到他行为的后果去反向地改变他。例如旁边有一个话痨，你专心做自己的事情，他可能很快就消停了。
（编者注：文中提到的贝叶斯推断在原书中也没有很详细的叙述，不过译者阮一峰在翻译本书的一年后将其弄清楚了并发布在网上。有兴趣的读者，可以参阅“阮一峰的网络日志”中的“贝叶斯推断及其互联网应用（一）：定理简介”和“贝叶斯推断及其互联网应用（二）：过滤垃圾邮件”这两篇文章。）

№.16 设计者的品味——如何做出优秀的东西？
很多人认为，“品味”是主观的，我喜欢的你可能不喜欢。喜欢一个东西，也很可能说不出理由。但事实上，众多学科对“美”的认识有很多共性。这就好像每个人的价值观并不相同，但总存在一些大家都认可的普世价值。
下面，我们一起来考虑一个问题：怎样的设计是好的设计？
好设计是简单的，所谓少即是多。当去掉装饰，我们将直面问题的本质，在自然界存在的大量的对称就是简单的一种表现，包括重复性对称和递归性对称（子元素的重复，如叶脉中的纹路，如埃菲尔铁塔的大塔上面有小塔）这两种形式，在很多领域都有应用。在软件中，能用递归解决问题的话通常也代表了你已经找到了最佳解法。

好设计永不过时。只要无误，每个数学证明都是永生的，譬如勾股定理。凯利·约翰孙也曾言：“如果解决方法是丑陋的，那就肯定会有更好的解决方法，只是暂时还没有发现而已。”如果你的作品对几代人都有吸引力，那么很大可能，它在将来也会有吸引力。要知道，只要练书法，就逃不过王右军的《兰亭集序》。
好设计能解决主要问题，且是启发性的。设计，势必在某个方面满足了人的需求。问题本身在变化，所以答案也是不断改进的。例如，人在海陆有了代步工具，就开始抬头要飞了。另外，好的作品会让使用者有自己的理解和使用方法（即启发性）。在软件行业，这就意味着为用户提供一些基本模块，能让他们随心所欲地自由组合新功能。
好设计应该是有趣的。虽然这点并非一定有，但轻松幽默的观感确实比呆板严肃的观感更吸引人且有力，比如彼得·勃鲁盖尔的画。幽默在一定程度上代表了力量，笑对厄运的力量。


《巴别塔》，彼得·勃鲁盖尔，也是《黑客与画家》的封面
好设计看似容易，实现的过程却很艰苦。在大多数领域，看上去容易的事情，背后需要大量的刻意练习。练习的过程让你把某些事情变成了一种自觉行为。当你直面难题时，可以很快地进入状态。不过，并非所有的痛苦都是有益的，解决难题的痛苦是有益的，被人干扰的苦恼却不然。
好设计是模仿大自然的设计。大自然在长期的演化中已经解决了很多设计问题，所以，如果你的设计越自然，可操作性就越强。现在的计算机很强大，不仅能模仿出大自然的环境，还能模仿大自然发展演变的结果。另外，仿生学也有很大的发展，通过模仿其他生物，我们发明了雷达、潜艇、斑马线等诸多人造物。
好设计是一种再设计。很少有人能一次把事情做对，你要能看出什么地方还可以改进，承认不足，并不断修复升级也是一种能耐。达·芬奇为了把一根线画对，常常要画五六次。开源软件因为公开承认自己会有bug，反而使得代码的bug比较少。
好设计是能被复制的设计。对待复制，应该是一个取精去糟的过程。刚入门的新手不知不觉会模仿他人，熟练之后才开始创作。最后他会意识到，把事情做对比原创更重要。最伟大的大师则会达到一种超脱自我的境界。他们想着的是找到正确答案，如果有人解答了问题的一部分，他们会不客气地直接拿来用。他们足够自信，能在他人成果的基础上保证个人特色。
好设计是奇特的。这是很难培养的，因为每个人的风格是自然而然地发展出来的。想要达到“奇特”，需要一心追求做出好作品。分享一幅奇特的画：


《雪中猎人》，勃鲁盖尔，1565
好设计是成批出现的。时势造英雄，大环境或者说圈子决定了某一群人在某个方向上更容易获得成功。对于大成就而言，互相激励比天赋更重要。（注：互联网的兴起让网上的某些集体也是人才辈出。）
好设计常常是大胆的。相比发现优美的东西，我们更容易发现丑陋。多数做出优美成果的人的初衷只是为了修正他们眼中的丑陋。单单无法忍受丑陋还不够，只有对某个领域足够熟悉，才能发现哪些地方是可以改进的。当你成为专家之后，你会听到内心深处的声音：“这样解决太糟糕了，一定有更好的选择！”优秀作品产生的秘诀就是：非常严格的品味，以及实现这种品味的能力。
先看见丑，再创造美。

№.17 今日总结
本节主要讨论了财富的创造和贫富分化，以及垃圾邮件过滤机制和好设计具备的特征。
关键词：
财富，贫富分化，垃圾邮件，过滤机制，好设计
要点：
  1. 只有创造财富，才能享受财富。
  2. 贫富分化是正常的，而强行压制差距会让社会整体上变穷。
  3. 优秀作品产生的秘诀就是：非常严格的品味，以及实现这种品味的能力。
思考与讨论：
在你眼里，什么样的设计称得上是“好的设计”？你赞成作者对“好的设计”的定义吗？你是否有些补充？

№.18 思考与讨论
编程语言是黑客们的工具，有言道：工欲善其事，必先利其器。
所以，选什么工具这件事得好好考虑考虑。
今天，保罗将分享他关于编程语言的一些想法。

№.19 编程语言解析——编程语言怎么就火了？
所有的机器都有一张操作命令清单，让我们控制它们。例如mp3上的打开、关闭、调节音量、播放、暂停等。计算机也是一种机器，它的指令清单就是机器语言（machine language）。
计算机诞生之初，所有程序就是一条条机器语言的命令，后来被改成了更容易理解的汇编语言。比如，计算机内部的加法表达方式是11001101，而在汇编语言中则为add。
机器语言和汇编语言的共同问题是，只能执行一些简单的操作，代码还比较复杂。代码越多，出现bug的可能性就越大。例如，我们想让蜂鸣器响10次，用机器语言写的程序是这样的：
a     将数字10存入地址0（注：正确的写法应该是9，编程语言中一般是从0开始计数,这样写为了突出代码易产生bug的特性）
        如果内存地址0的值为负数，跳到b行
        蜂鸣器发出声音
        将内存地址0的值减1
        跳到a行
b      ……程序的其他部分
后来，程序员找到了一个“助手”——编译器。编译器本身就是一个程序，作用是将简单的易书写的程序转换为硬件可以理解的语言（还有一个“助手”叫解释器，不同于编辑器全部翻译再运行，而是实时翻译，一行一行运行）。这种方便书写的语言就是高级语言。比如，还是让蜂鸣器响10次，只需要写：
dotimes 10 蜂鸣器响（dotimes 是Lisp语言中表示循环处理的命令。）
程序变得更简短了，如果出现了错误，也更容易发现。另外，高级语言也使程序有了可移植性。不同型号计算机的机器语言是不完全相同的，如果采用高级语言，你就不用针对每种机型写代码，重写编译器就成。
编译器处理的高级语言代码叫做源码，处理之后的机器码叫做目标码（可见于在市场上售卖的大部分商业软件）。目标码可读性很差，基本上相当于加密。后来出现了开放源代码的潮流：公开可以随意修改的源码。开源让我们可以修改软件，同时也能自己动手修正bug。
绝大多数程序员在绝大多数时候，都会选择高级语言编程。现在的高级语言大概有几百种，比较出名有：Fortran、Lisp、Cobol、Basic、C、Pascal、Smalltalk、C++、Java、Perl和Python（注：这是2004年的情况了）。不同的机器语言的指令集基本相同，但不同的高级语言开发程序的模式差别却相当大。
究竟该用哪种语言，一直以来，都很有争议。一些黑客只喜欢自己用的语言，反感其他所有语言；另一些黑客则表示所有的语言都一样。语言之间确实差别很大，但很难确定地说哪种语言是最好的。（编者注：后文关于编程语言的评论，均为原书作者观点，大家可以听听他的看法，至于信或不信请自行决定。）
高级语言也有层次。例如，C语言是一种低层次语言，接近硬件，堪称可移植的汇编语言，而Lisp的层次则相当高。一般情况，层次越高，越有利于编程，但也并非绝对。接近机器语言的低层次语言运行速度更快，大多数操作系统都是用C语言编写的，因为大家都觉得操作系统越快越好。
编程语言之间还有一个议题是静态类型语言与动态类型语言之争。用静态语言写代码，必须清晰地定义每个变量的类型，而在动态语言中，你可以随时更改变量的类型。前者的拥护者认为这样可以防止bug，且能帮助编译器生成更快的代码；后者的粉丝则认为静态类型对程序构成了限制。这个争论一直没有停息过，不过也要看需求。有人希望编程语言可以防止程序员干傻事，有人则认为编程语言应该让程序员能够心想事成。所以，美国国防部很看中Java。
另一个争论的热点则是面向对象编程（一种计算机编程架构）。打个比方，你需要写一个程序计算二维图形的面积。有两种实现方式：方法一，用一整块代码判断遇到的是什么图形，然后再用相应的公式来计算面积；方法二，写两段代码，一段是解决圆形类的，一段是解决正方形类的，每个类里面用一小块代码计算该类图形的面积。方法二即是面向对象的编程方式（简单可理解为通用型和专用型）。面向对象编程的优点在于，如果你需要修改程序，比如计算三角形的面积，你只需要再另外加一块相应的代码就可以了，甚至都不需要修改另外的两部分。当然，这也是有缺点的，增加的代码不用考虑其他部分，结果往往导致写出性能不佳甚至有副作用的代码。
关于面向对象编程的争论并没有静态、动态类型之争那样泾渭分明。因为编程时，静态类型和动态类型是必须二选一的，但面向对象编程则只是程度不同的问题。我认为，在编程时，应该选择“允许”（而非“强迫”）使用面向对象编程的语言，因为用不用是你的自由。
拉里·瓦尔为了使管理机房的工作变得更方便，用业余时间创造了Perl语言。他给了很多黑客启发：为什么不自己动手设计一款语言呢？结果有了一些“头重脚轻”的语言：它们的内核设计一般，但是却有着强大且好用的函数库，可以很方便地解决一些特定问题。
很快，语言变得多样化了。编程语言的文艺复兴时代到来，“战争”也随之发生。
真是百花齐放、百家争鸣，我觉得这是程序员的黄金时代。

№.20 一百年后的编程语言——为什么不从现在就开始这样做呢？
本节我想探讨的问题是：一百年后，人们会使用什么语言开发软件？
如果幸运地找到答案，我们从现在就可以开始用上这些语言。
我认为，编程语言和自然生物一样，存在着进化脉络。在我看来，Java的进化之路已到尽头。回到开头的问题，其提出是为了找到编程语言的进化脉络，启发我们选择那些靠近主干的语言，这对当前的编程是有利的。
编程语言的进化同生物的进化还是有区别的，因为不同分支的语言会发生聚合。比如，Fortran分支看来正在与Algol（最早的计算机语言之一，对后来的许多语言产生了极大的影响）的继承者聚合。编程语言发生聚合，是因为编程语言的形式有限，怎么变都差不多是那几种。另外，编程语言的突变也不是随机的，一般是借鉴其他语言的设计思想。
对于设计者来说，认清进化的主干有助于识别现存的优秀语言，还可以把它当作设计语言的指南。
编程语言由两大部分组成：基本运算符的集合（扮演公理的角色）以及除运算符以外的其他部分（原则上，这部分可以用基本运算符表达出来）。基本运算符是一种语言能否长期存在的最重要因素，就像数学家认为公理越少越好一样，基本运算符也是如此。
所以，我的判断是——那些内核最小、最干净的编程语言才会存在于进化的主干上。内核设计得越小、越干净，这种语言的生命力就越顽强。
在软件走过的50多年里，编程语言的进化其实是非常缓慢的，因此展望一百年后的语言是可行的。编程语言进化如此缓慢是因为它们并不是真正的技术。语言是一种书写方法，它只能像数学符号那样渐变式变化。
下面，我们探讨一些细节：
首先，可以预料的是，一百年后计算机的运行速度将会快很多。如果其他条件不变，现在被认为运行速度慢的语言（即运行效率不高）将会有更大的发展空间。对实现方式少作限制的语言，在编程时会具备更大的灵活性。另外，硬件性能的大幅提高可以让我们在性能上做一些妥协，换来便利性的提高，所以一些由于效率低下但编写方便的语言会被重新考虑（要知道，程序员的时间要比机器的时间更有价值）。
放弃一些数据类型，在一百年后应该也是可以实现的。Arc语言已经放弃字符串类型了，看上去效果还不错。一百年后，性能分析器将变得越来越重要，它能指导提升应用软件运行速度。
一百年后的编程语言，在理论上，今天就可以设计出来。如果现在用这种语言编程，纵然我们不能直接用它开发软件（硬件跟不上），但用它为一些应用程序生成快速代码还是能用得到的。所以，为什么不现在就动手尝试写出一百年后的编程语言呢？
在设计编程语言时，我们可以牢记这个目标。好比要把车开直，你看的是远处的点。

№.21 拒绝平庸——你的对手还很强大
简单说一下，Viaweb网站主要有两个部分——编辑器和订单处理系统。编辑器主要供用户搭建自己的网站，这个部分是用Lisp语言开发的。这是第一个用Lisp语言开发的大型应用程序。
埃里克·雷蒙德的《如何成为一名黑客》（How to Become a Hacker）中谈到，如果你想当黑客，可以从Python和java入手，因为比较容易掌握。然后开始学C和Perl，C可以用来对付Unix系统，Perl则可以用来管理系统和开发CGI脚本。最后，他建议，把黑客作为人生目标的人，应该学习Lisp：
Lisp很值得学习。你掌握它以后，会感到它给你带来的极大启发。这会大大提高你的编程水平，使你成为一个更好的程序员。尽管在实际工作中极少会用到Lisp。
埃里克·雷蒙德的观点也代表了大多数人对Lisp的看法。但这里面有一个矛盾：Lisp语言能让你成为更好程序员，但你却不用它，这难道不奇怪吗？
对于技术的选择，我们应该考虑怎样的技术能最好地完成工作。我和莫里斯都很了解Lisp语言，虽然其他人都是用C++和Perl做开发。但我们相信自己的直觉，坚持用Lisp开发Viaweb。
互相模仿对于大公司而言，是可行的。但对于创业公司而言，却意味着关门倒闭。因为大公司只要每件事做到大公司的平均水平，就能得到大公司的平均成长结果（大约10%）。但创业公司的生存率远低于50%，所以，创业公司最好做一些独特的事情，这可能会提高你的生还概率。
我们当时选择Lisp，主要基于以下考虑：首先，公司需要快速开发出新产品，而Lisp语言非常适合快速开发。其次，一般公司都不会使用这种语言，如果Viaweb用了，这可能会发展成为产品优势。最后，Lisp是一种抽象层次非常高的语言，效率很高，不需要庞大的开发团队，这会降低成本。
Viaweb前前后后遇到二三十个竞争对手，获得胜利的总是Viaweb。互联网软件的本质打败了一批桌面软件的竞争对手；在功能上总是优于使用CGI脚本的竞争对手；至于在引入新功能方面，效果更佳，通常竞争对手才发布新闻稿，在一两天内，Viaweb就可以发布自己的新版本。商场如战场，在竞争中，你的对手无法理解你的技术优势，摸不透你，你的胜算就增加了。
Lisp最核心的优势在哪里？一句话：Lisp是目前最强大的编程语言。
它没有得到广泛使用，是因为编程语言会让使用者形成难于改变的习惯性思维。编程语言的编程能力是有差异的，最直观的是高级语言比机器语言更强大好用。今天的大多数程序员都是使用某种高级语言编程，然后让编译器把它翻译成机器语言。这种流程进而影响了硬件，硬件指令集都是针对编译器而不是程序员设计的。
最终选择使用哪种语言编程，有很多情况需要考虑。例如，如果你在开发的软件需要与另一个程序紧密配合，那么选择与后者保持一致的语言来编程是比较方便的。如果你的程序只需要做一些简单的运算，那么选择接近机器语言的低层次语言是比较方便的。如果你的程序很短，且只需要用于一次性的特定场合，那么根据你的需要选择具有强大函数库的语言会比较好。总体而言，选择强大的、效率在可接受范围内的编程语言都是正确的。
高级语言与低级语言相比，其优势在于功能更强大，如果一开始接触的语言不能满足你的编程需要，你可能会寻找并学习一门更高级的语言。一旦找到包含所有你需要功能的语言，你就会觉得这门语言就够好、够用了。到了一定年龄后，程序员更是极少更换自己的编程语言。此时就算看到了更高级的语言，你也可能仅仅觉得这些语言很奇怪，而不会去深入了解。只有懂得最强大的那种语言的人，才能洞悉所有语言的优劣，所谓一览众山小。
我最开始是用Basic语言编程的，很弱，甚至不支持递归（笔者注：在运行的过程中调用自己）。但当时觉得没有递归就没有吧，对使用并没有影响。
后来，接触了Lisp,才发现Lisp的宏是独一无二的，很多语言甚至都没有。Lisp有一种很奇特的语法，或者说它根本没有语法。一般的源代码程序经过编译器解析会生成解析树，Lisp的奇特之处在于，你可以写程序控制解析树，进行任意的存取操作。这种程序就叫宏，它们可以用来生成其他程序。
Viaweb编译器的源码大约有20%-25%是宏。它们比普通的Lisp函数难写。这就意味着这个程序至少有20%-25%代码的功能无法轻易用其他语言实现。这就是我们给竞争对手设下的障碍，至少不能轻易追赶上。
我写此文的目的不是想改变任何人的观点，而是想让那些有兴趣学习或正在学习Lisp语言的人放心。即使使用者不多，可能学会了也没什么用，但Lisp语言是强大的。在商业竞争中使用，其优势就会显现出来。
普通的编程语言正在主导一切，我不建议大家挑战这种习惯势力，相反，我们应该向日本合气道（一种日本武术，主要特点是“以柔克刚”“不主动攻击”等）选手学习。
如果你为创业公司工作，那么这里有一个评估竞争对手的妙招——关注他们的招聘职位。我读过大量竞争对手的招聘职位。基本上，这样就可以大致了解，哪些公司是值得关注的，哪些是不用在意的。总结：职位描述里使用大量IT词汇的，内容越多，这家公司越构不成威胁；要求应聘者有Oracle数据库经验的公司，你可以放弃关注了；招聘C++或Java程序员的公司，对你也不会构成威胁；如果招聘Perl或Python程序员，那就需要稍微注意了，他们会存在威胁，至少听起来，这是一家由黑客控制的技术公司；如果见到一家招聘Lisp黑客的公司，那么，对手来了。

№.22 今日总结
今天，我们主要讨论了编程语言的一些特点和展望（尤其是Lisp语言）。
关键词：
编程语言，一百年后，Lisp语言
要点：
  1. 编程语言的多样化，让我们可以接触到不同语言背后的设计思想。
  2. 请在今天去尝试着设计一百年后的编程语言，因为这会给我们带来好结果。
  3. 拒绝平庸，推荐Lisp语言——尤其是创业公司。
思考与讨论：
编程语言是黑客的工具，有的人喜欢斧子，有的人喜欢锤子。在作者看来，Lisp语言是目前最强大的编程语言，经过他的一番论证后，你是否认同这个观点？为什么？

№.23 思考与讨论
每个黑客心中都可能对编程语言存在一些相似的幻想，好比每个少年可能都有一个长发飘飘的梦中情人。那究竟是怎样的一种语言？
今天，除了回答上面的问题，我们还会随作者继续看一看编程语言在竞争中的优势以及聊一聊软件该如何设计。

№.24 书呆子的复仇
软件行业有一场永不停息的战斗，书生气的开发者和官僚主义的经理之间总是发生冲突。举例来说，经理大多都不懂软件的运作机制，也不太清楚各种编程语言有什么区别。但他们经常会明确要求你一定要使用某种语言进行开发，比如Java。他这样要求，是因为Java是业界标准。且市场上Java程序员多，万一你不干了，也可以轻松地找到替代者。
经理有一个错误的假设：所有的编程语言功能相似，用哪一种区别不大。但实际上并非如此，某些情况下，有些语言就是比较好。
虽然大家都觉得Java一定有过人之处，但在黑客圈子里，Perl被公认比Java酷得多。黑客社区Slashdot就是用Perl开发的。而Python的使用者又往往看不起Perl，另一些人则认为Ruby语言是取代Python的最佳选择。当你依照Java、Perl、Python、Ruby这样的顺序观察这些语言，你会发现一个有趣的结果。越是排在后边的语言越像Lisp。Python语言模仿Lisp，甚至把许多Lisp黑客认为错误的功能也一起模仿了。而Ruby，可以称得上是有自己句法的Lisp方言。
1958年，约翰·麦卡锡第一个提出了Lisp语言。我认为，当前最流行的编程语言只是实现了他在1958年的想法而已。我们今天所说的编程语言，是指控制计算机的一种工具。麦卡锡实际做出来的Lisp是完全不同的东西，Lisp语言的基础是他的一种理论演算，他想用更简洁的方式定义图灵机（一种完全虚拟的计算机，作用是证明计算理论）。正如他后来所说：
Lisp比图灵机表达起来更简洁。证明这一点的一种方法就是写一个Lisp通用函数，证明它比图灵的一般性描述更短、更易懂。这个Lisp函数就是eval……它用来计算Lisp表达式的值……编写eval函数需要发明一种表示法，能够把Lisp函数表示成Lisp数据。设计这种书写法完全是为了满足论文写作的需要。（我）根本没有想过用它来编写Lisp程序并在计算机上运行。
1958年年底，麦卡锡的学生史蒂夫·拉塞尔（历史上第一个电脑游戏的创作者）看到了eval函数的定义，将它翻译成机器语言，做成了Lisp解释器，基本上就是它现在的样子了。
Lisp语言是从纯理论发展为编程语言的，其本质是数学。数学是不会过时的，因此Lisp语言也不会过时。Fortran语言也是从20世纪50年代沿用至今，但它是作为编程语言被设计出来的。今天，我们把Lisp看成高级语言，而把Fortran看成一种相当低层次的语言。
Lisp和Fortran代表了语言发展的两大方向。前者的基础是数学，后者的基础是硬件架构。从诞生之初，这两大方向一直在互相靠拢。直到今天，最高级的主流语言也只是刚刚接近Lisp的水平。虽然已经很接近了，但还是没有Lisp那样强大。
Lisp语言有9种思想，其中一些如今已经习以为常，另一些刚刚才出现在其他高级语言中，至今仍有2种是Lisp独有的。按大众的接受度从高到底，9种思想排列如下：
1. 条件结构（即if-then-else结构），判断条件是否成立，导向不同的结果。算法的流程有不同的流向，循环结构中一定会有条件结构。
2. 函数也是一种数据类型。在Lisp语言中，函数与整数或字符串一样，也属于数据类型的一种，能够存储在变量中，也可以当作参数传递。在大多数其他语言中，函数是一种过程，也被称为子程序。
3. 递归。Lisp是第一种支持递归函数的高级语言（注：递归是一种调用自身的算法）。
4. 变量的动态类型。在Lisp语言中，所有变量实际上都是指针，所指向的值有类型之分，变量本身没有。复制变量就相当于复制指针，而不是他们指向的数据。
5. 垃圾回收机制。程序自动判断哪些内存不再需要，并予以回收。
6. 程序由表达式组成。Lisp程序是一些表达式树的集合，每个表达式都返回一个值。其他大多数语言都是由表达式和语句组成。
7. 符号类型。符号实际上是一种指针，指向存储在散列表中的字符串。所以，比较两个符号是否相等，只要看它们的指针是否一样就行了。
8. 代码使用符号和常量组成的树形表达式。
9. 无论什么时候，整个语言都是可用的。Lisp并不真正区分读取期、编译期和运行期。你可以在读取期编译或运行代码，反之亦可。
Lisp语言刚出现的时候，这些思想与其他编程语言大相径庭。随着时间流逝，流行的编程语言不断更新换代，语言设计思想逐渐向Lisp靠拢。1到5已经被广泛接受，6也开始在主流编程语言中出现，7在python 中有所实现，8和9是由拉塞尔自行添加的。程序直接以解析树的形式表达出来，使得Lisp语言看上去很古怪，但也成为了这种语言独一无二的特点。用一门语言自己的数据结构来表达该语言是非常强大的功能，Lisp的宏就是如此。它无所不包，既可能是某样表达式的缩略形式，也可能是一种新语言的编译器。
一般来说，条件越苛刻的项目，强大的编程语言就越能发挥作用。不过，不常用的技术的使用也是有代价的，可能会有3个问题：不能很好地协同其他语言工作；可能找不到需要的很多函数库；可能招不到程序员。
第一个问题取决于你是否控制整个系统。如果你能控制整个系统，那么你就能适用任何你想用的语言。
第二个问题，函数库的重要性则取决于要开发的应用程序的特点。如果你要编写的一个程序需要几个优秀程序员至少花6个月的时间去开发的话，语言本身的强大编程能力可能就是你最需要考虑的因素。这就好像是杀鸡用菜刀，解牛用牛刀。
至于第三个问题，我认为是在混淆视听。一般公认少于10个人的团队最适合开发软件。雇佣这样规模的团队，应该不会有很大的问题。而且选择更强大的编程语言会减少所需要的开发人员数量（代码更少，使用高级语言的黑客能力可能更好）。
如果你创业的话，千万不要为了取悦风险投资商或潜在并购方而设计你的产品。让用户满意才是对的方向。
强大的代码可以使用“自下而上”的编程方法，添加基础语言之上的中间层去开发软件，可以让你写出更短的代码。另外，分享一个软件界的成功诀窍：使用你所知的最强大的语言，用它去解决你所知的最难的问题，并且等待竞争公司的经理做出随大流的决定。
这样，相当于你坐高铁，别人赶马车，要怎么追？
（编者注：这篇的题目是“书呆子的复仇”，作者又在书中将约翰·麦卡锡称为“书呆子之王”，所以，可以理解为：书呆子创造的Lisp语言逆袭了“受欢迎的”业界标准语言。）

№.25 梦寐以求的编程语言——可以让黑客随心所欲使用的语言
一位著名的操作系统专家曾说过，优秀的语言不一定会被市场接受，很可能无人使用，因为语言的流行不取决于它本身。
那么，语言的流行到底取决于什么呢？为了找到答案，我们可以观察语言的使用者——黑客，这个群体的喜好。
不管怎样，一开始必须有一群黑客使用这种语言，然后其他人才会知道它。只要最初的用户达到“临界数量”和足够长的时间，一种语言可能就会达到应有的流行程度。我觉得，这个临界数量可能是20人（最好是专家级黑客）。找到种子用户的方法可以是：让人们使用一种他们需要的且用这种新语言开发的应用程序。
不得不承认，确实有一个外部因素会影响到语言的流行，即一种语言必须是某个流行的计算机系统或基础软件的脚本语言。在现实中，编程语言总是与它们依附的载体联系在一起。所以，设计语言，不能只单纯地设计语言本身，还必须为它找一个依附的流行系统。且语言的实现最好是免费的，因为黑客个人可能不愿出钱购买软件。编程语言还需要有一本介绍它的好书，最好还有在线文档。
简洁也是黑客欣赏的特点之一，简洁要求语言更加抽象。如果你不是想有意侮辱黑客的智商的话，就不要使用啰里啰嗦的语法。有一个笑话说，黑客动手前，会在心里盘算一下哪种语言能打更少的字。不过，这个笑话其实正反映了真实情况，简单点，很符合人性不是？
另外，可编程性（即帮助自己做到想做的事）比简洁更重要。一种真正优秀的编程语言应该是既整洁又混乱的。“整洁”是指设计清晰，内核由数量不多的运算符构成，这些运算符不仅易于理解且都有独立用途。“混乱”的意思是允许黑客随心所欲地使用。
编程语言还必须很适合开发一次性程序。所谓一次性程序，是指为了完成某些很简单的临时性任务而在很短时间内写出来的程序。一次性程序往往并不是真的只用一次，很多大型项目就是从一次性程序演变而来。编程语言如何做到适合一次性程序呢？首先，它必须容易装备（指容易安装以及易与使用者互动）。其次，要简洁，而简洁性的最高形式是有人已经帮你把程序写好，你只要运行就可以——而函数库就是别人帮你写好的程序，优秀函数库的重要性将超过语言本身。函数库的使用应该符合程序员的直觉，让他可以猜得出哪个函数能满足自己的需要。
此外，虽说好的语言生成的代码运行速度较快，但速度的关键其实是好的性能分析器。语言设计者会认真研究编译器，觉得提高编译器的速度比较有成就感，而对于性能分析器，可有可无买一送一吧。这是语言设计者与用户需求的脱节。性能分析器自动运行后，能告诉程序员程序运行时每个部分的性能，甚至有可能找出不合理的算法。
编程语言想要变得流行，就要经受住时间的考验。因为相信新事物是需要时间的，大多数人对待新事物都会比较慎重。所以发明新事物的人必须有耐心，要做好持久战的准备。送一句话给你：人们真正注意到你的时候，不是第一眼看到你站在那里，而是发现过了这么久你居然还是那里。
新技术被市场接纳的方式主要有“自然成长式”和“大爆炸式”两种。前者是通过创业者的持续改进和口碑效应壮大起来的，而后者是有风险资本的支持、在短期内成为热门（看似风光，却有拔苗助长的危险）。不过，目前的主流编程语言和技术，大多是自然成长式的。
著名散文家E·B·怀特说过，“最好的文字来自不停的修改”。软件开发也是如此，再多的修改都不过分。但一开始需要精心选择用户，避免使用者过快增长。发展用户的同时优化项目，明智的做法就是放慢速度。用户越少，你修改带来的影响越小，动作也可以大一些。另外，在写软件的过程中，要在战略上藐视困难，再说战术上重视解决方法。动如小伙子，静如老头子——同时抱有信心和怀疑。
总结：黑客心目中梦寐以求的语言，干净简练，具有高层次的抽象和互动性，而且很容易装备，可以用很少的代码就解决常见的问题。有现成的函数库可以调用，有大量优秀的范例可供学习，且符合直觉，只需要花几分钟阅读范例就可以领会。除了一些绝对必要隐藏的东西，这种语言的所有细节对使用者都是透明的。它尽可能让你自己定义的部分与它本身定义的部分处于同等地位。这种梦幻般的编程语言不仅开放源码，更开放自身的设计。
一句话总结：够简单，够强大，够自由。

№.26 设计与研究——够“新”够“好”
我认为设计与研究的区别在于，前者追求“好”，后者追求“新”。优秀的设计不一定很“新”，但必须“好”；优秀的研究不一定很“好”，但必需“新”。二者最后的交叉在于：只有应用“新”的创意和理论，才会诞生超越前人的最佳设计；只有解决那些值得解决的难题（即“好”的难题），才会产生最佳研究。
如果把创造编程语言看成是设计问题，你会更多地考虑用户（体验）。当然，让用户满意并不等于迎合用户的一切需求，因为用户可能不知道自己真正需要的是什么。你必须通过用户的表述看到他真正的需求，然后对症下药。
在设计之前，我们需要设定目标用户。如果想讨好所有人，可能最后谁都不喜欢。另外，纵然用户和你相差很多，也不要低估用户的需求。要知道：取法乎上，仅得其中；取法乎中，仅得其下；取法乎下，其下下矣。不想改变世界的程序员不是一个好设计师。
为了做出优秀的设计，你必须贴近用户，站在用户的角度调整自己的构想。在软件领域，贴近用户的设计思想被归纳为“弱即是强”模式（由Lisp专家理查德·加布里埃尔于1991年提出，含义广泛，其中最重要的一个结论是：有时，更少的功能反而更好用）。如果你正在设计某种新东西，就应该尽快拿出原型，参考用户的意见对其进行修改。这就好比画画，分别将各个部分画出来不如先画一个大体轮廓，再逐步加工完成。
另外，士气是设计的关键因素，不发奋不足以出精品。这也解释了为什么设计师很难为低端用户设计出优秀的产品，因为他们会因感到无趣而马虎应付。
设计流程上可以在先做出原型，再逐步加工做成成品，这种方式有利于鼓舞士气，因为你可以随时看到工作成效。我个人有条规则就是：任何时候，代码都要能跑起来。
最后，设计意味着做出符合人类特点和需要的产品。但是，“人类”不仅包括用户，还包括设计师，所以设计工作本身也必须符合设计师的特点和需要。设计师开心了，产品的质量上去了，用户也开心。

№.27 今日总结
今天，我们谈论了三个话题：Lisp的强大之处，理想的编程语言和好的设计。
关键词：
Lisp语言，竞争，最好的编程语言，好的设计
要点：
  1. 优秀的语言不一定会被市场接受，因为语言的流行并不仅仅取决于它自身。
  2. 黑客梦寐以求的编程语言，简而言之：够简单，够强大，够自由。
  3. 为了做出优秀的设计，你必须贴近用户，站在用户的角度调整自己的构想。
思考与讨论：
读完本书，你对黑客这个群体和他们从事的工作是否有了新的认识？如果有机会学习一门编程语言，你会选择哪种语言？为什么？
